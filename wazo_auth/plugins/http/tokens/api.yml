paths:
  /token:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      summary: Creates a token
      description: |
        Creates a valid token for the supplied username and password combination or refresh_token
        using the specified backend.

        The user's email address can be used instead of the username if the email address is confirmed.

        The stock backends are: ``wazo_user``, ``ldap_user``.

        Creating  a token with the `access_type` *offline* will also create a refresh token which can be used
        to create a new token without specifying the username and password.

        The username/password and refresh_token method of authentication are mutually exclusive

        For more details about the backends, see http://documentation.wazo.community/en/latest/system/wazo-auth/stock_plugins.html#backends-plugins
      operationId: createToken
      tags:
      - token
      security:
      - wazo_auth_basic: []
      parameters:
      - $ref: '#/parameters/wazo_session_type'
      - name: body
        in: body
        description: The token creation parameters
        required: false
        schema:
          type: object
          properties:
            backend:
              type: string
              default: wazo_user
            domain_name:
              type: string
              description: |
                The `domain_name` must match a tenant's domain_name entry to find the appropriate LDAP or CAS configuration.
            expiration:
              type: integer
            access_type:
              type: string
              description: |
                The `access_type` indicates whether your application can refresh the tokens when the user is not
                present at the browser. Valid parameter values are *online*, which is the default value, and *offline*

                Only one refresh token will be created for a given user with a given `client_id`. The old refresh
                for `client_id` will be revoken when creating a new one.

                The *client_id* field is required when using the `access_type` *offline*
              default: online
              enum:
                - online
                - offline
            client_id:
              type: string
              description: |
                The `client_id` is used in conjunction with the `access_type` *offline* to known for which application
                a refresh token has been emitted.

                *Required when using `access_type: offline`*
            refresh_token:
              type: string
              description: |
                The `refresh_token` can be used to get a new access token without using the username/password.
                This is useful for client application that should not store the username and password once the
                user has logged in a first time.
            ticket:
              type: string
              description: |
                The `ticket` field is used instead of credentials when using the `cas` backend.

                *Required when using the `cas` backend*
      responses:
        '200':
          description: "The created token's data"
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: Invalid expiration or missing field
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token generation error
          schema:
            $ref: '#/definitions/Error'
  /token/{token}:
    get:
      summary: Retrieves token data
      description: Checks if a token is valid in a given context and return the token data.  If a scope is given, the token must have the necessary permissions for the ACL. If a tenant is given, the token must have that tenant in its sub-tenant subtree.
      tags:
      - token
      security:
      - {}
      parameters:
        - $ref: '#/parameters/token'
        - $ref: '#/parameters/scope'
        - $ref: '#/parameters/tenant'
      responses:
        '200':
          description: "The token's data"
          schema:
            $ref: '#/definitions/Token'
        '403':
          description: This token cannot acces the required ACL
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
    head:
      summary: Checks if a token is valid
      description: Checks if a token is valid in a given context.  If a scope is given, the token must have the necessary permissions for the ACL. If a tenant is given, the token must have that tenant in its sub-tenant subtree.
      tags:
      - token
      security:
      - {}
      parameters:
        - $ref: '#/parameters/token'
        - $ref: '#/parameters/scope'
        - $ref: '#/parameters/tenant'
      responses:
        '204':
          description: No data
        '403':
          description: This token cannot acces the required ACL
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Revoke a token
      tags:
      - token
      security:
      - {}
      parameters:
        - $ref: '#/parameters/token'
      responses:
        '200':
          description: Success message
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'

  /token/{token}/scopes/check:
    post:
      summary: Check a token against scopes
      description: Checks if a token is valid for given scopes.
      tags:
      - token
      security:
      - {}
      parameters:
        - $ref: '#/parameters/token'
        - name: body
          in: body
          description: The token scopes check parameters
          required: true
          schema:
            $ref: '#/definitions/ScopeCheckRequest'
      responses:
        '200':
          description: "Provided scope list checked against the token"
          schema:
            $ref: '#/definitions/ScopeList'
        '400':
          description: The provided scope list is invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: This token is not valid for the provided tenant
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Token not found
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/Error'
  /tokens:
    get:
      operationId: listRefreshTokens
      summary: "Retrieve a list of refresh tokens that have been created on the system"
      description: |
        **Required ACL**: `auth.tokens.read`

        Finds all refresh tokens and return the list. Access tokens are not included in the result.
      tags:
        - token
      security:
        - wazo_auth_token: []
      parameters:
        - $ref: '#/parameters/tenantuuid'
        - $ref: '#/parameters/recurse'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/direction'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
      responses:
        '200':
          description: A refresh token list
          schema:
            $ref: '#/definitions/RefreshTokenList'
        '400':
          description: Invalid parameters
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'
  /users/{user_uuid_or_me}/tokens:
    get:
      operationId: listUserRefreshTokens
      summary: "Retrieve a user's refresh token list"
      description: |
        **Required ACL**: `auth.users.{user_uuid}.tokens.read`

        Finds all of a user's refresh token and return the list. Access tokens are not included in the result.

        Doing a query with the `user_uuid` `me` will result in the current user's token being used.
      tags:
        - token
        - users
      security:
        - wazo_auth_token: []
      parameters:
        - $ref: '#/parameters/user_uuid_or_me'
        - $ref: '#/parameters/tenantuuid'
        - $ref: '#/parameters/order'
        - $ref: '#/parameters/direction'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/search'
      responses:
        '200':
          description: A refresh token list
          schema:
            $ref: '#/definitions/RefreshTokenList'
        '400':
          description: Invalid parameters
          schema:
            $ref: '#/definitions/APIError'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'
  /users/{user_uuid_or_me}/tokens/{client_id}:
     delete:
      operationId: deleteRefreshTokens
      summary: "Delete a user's refresh token"
      description: |
        **Required ACL**: `auth.users.{user_uuid}.tokens.{client_id}.delete`

        Remove a given refresh token. This only prevent this refresh token from creating new
        access tokens. Any tokens that are currently issued are still usable and should be
        revoked if needed.
      tags:
        - token
        - users
      security:
        - wazo_auth_token: []
      parameters:
        - $ref: '#/parameters/user_uuid_or_me'
        - $ref: '#/parameters/client_id'
      responses:
        '204':
          description: The refresh token has been deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
        '404':
          description: User or refresh token not found
          schema:
            $ref: '#/definitions/APIError'
        '500':
          description: System related token error
          schema:
            $ref: '#/definitions/APIError'

definitions:
  RefreshToken:
    type: object
    properties:
      client_id:
        type: string
        description: The `client_id` that was used to create this refresh token
      created_at:
        type: string
        description: The time at which this token was created
      mobile:
        type: boolean
        description: Indicate if that refresh token was created with a mobile session type
      user_uuid:
        type: string
        description: The UUID of the user which created this refresh token
      tenant_uuid:
        type: string
        description: The tenant UUID of the user which created this refresh token
  RefreshTokenList:
    type: object
    properties:
      total:
        type: integer
        description: The number of refresh tokens for that user
      filtered:
        type: integer
        description: The number of refresh token matching the searched terms
      items:
        type: array
        items:
          $ref: '#/definitions/RefreshToken'
        description: A paginated list of refresh tokens
  ScopeCheckRequest:
    type: object
    properties:
      tenant_uuid:
        type: string
        format: uuid
        description: If provided, also checks the token against this tenant
      scopes:
        type: array
        description: Scopes to check against
        items:
          type: string
    required:
      - scopes
  Token:
    type: object
    properties:
      data:
        type: object
        properties:
          metadata:
            type: object
            description: "Information owned by wazo-auth about this user"
          token:
            type: string
          expires_at:
            type: string
          utc_expires_at:
            type: string
          issued_at:
            type: string
          utc_issued_at:
            type: string
          auth_id:
            type: string
            description: The unique identifier retrieved from the backend
          xivo_user_uuid:
            type: string
            description: |
              The UUID of the matching wazo-confd user if there is one. This
              field can be null.

              This field should NOT be used anymore, the "pbx_user_uuid" in the
              metadata field is the prefered method to access this information.
          xivo_uuid:
            type: string
          acl:
            type: array
            items:
              type: string
            description: The list of allowed accesses for this token
          session_uuid:
            type: string

  ScopeList:
    type: object
    properties:
      scopes:
        type: array
        description: the scopes and their check result
        items:
          type: object
          description: 'JSON object with scopes as keys and boolean values whether the token is valid for the given scope, e.g. `{"confd.groups.create": true}`'
parameters:
  scope:
    name: scope
    in: query
    type: string
    description: The required ACL
    required: false
  tenant:
    name: tenant
    in: query
    type: string
    description: A tenant UUID to check against
    required: false
  token:
    name: token
    in: path
    type: string
    description: The token to query
    required: true
  wazo_session_type:
    name: Wazo-Session-Type
    in: header
    type: string
    description: The session type
    required: false
    enum:
    - mobile
    - desktop
  user_uuid_or_me:
    name: user_uuid_or_me
    in: path
    type: string
    description: The UUID of the user or `me` to refer to the user doing the query
    required: true
  client_id:
    name: client_id
    in: path
    type: string
    description: The client_id of the refresh token to revoke
    required: true
