#! /bin/bash

set -e

[ "$DPKG_MAINTSCRIPT_PACKAGE" ] && . /usr/share/debconf/confmodule

DAEMONNAME='wazo-auth'
USER='wazo-auth'
HOME="/var/lib/${USER}"
GROUP=$USER
LOG_FILENAME="/var/log/${DAEMONNAME}.log"
SAML_DIR="${HOME}/saml"
KEY_FILE="${SAML_DIR}/server.key"
CERT_FILE="${SAML_DIR}/server.crt"

case "$1" in
    configure)
        previous_version="$2"

        # add/update user
        if ! getent passwd $USER > /dev/null ; then
            echo "Adding system user $USER" 1>&2
            adduser --quiet --system --group \
                    --home "${HOME}" \
                    $USER
        fi

        if [ ! -e "$LOG_FILENAME" ]; then
            touch "$LOG_FILENAME"
        fi
        chown $USER:$GROUP "$LOG_FILENAME"

        if [[ -z "${previous_version}" ]]; then
            # Add nginx configuration on new installations
            ln -sf  /etc/nginx/locations/https-available/$DAEMONNAME \
                    /etc/nginx/locations/https-enabled/$DAEMONNAME
        fi

        if [ ! -e "${SAML_DIR}" ]; then
            mkdir -p "${SAML_DIR}"
            chown $USER:$GROUP "$SAML_DIR"
        fi

        if [ ! -e "$KEY_FILE" -o ! -e "$CERT_FILE" ] ; then
            config="${SAML_DIR}/openssl-x509.conf"
            openssl req -x509 -sha256 -nodes -days 825 -newkey rsa:2048 -config "$config" -keyout "${KEY_FILE}" -out "${CERT_FILE}"
        fi

        chown $USER:$GROUP "${KEY_FILE}" "${CERT_FILE}"
        chmod 640 "${KEY_FILE}"
        chmod 644 "${CERT_FILE}"

        db_get wazo-auth/db-skip
        db_skip="$RET"
        if [ "$db_skip" = "false" ] ; then
            db_get wazo-auth/db-host
            db_host="$RET"
            db_get wazo-auth/db-port
            db_port="$RET"
            db_get wazo-auth/db-admin-username
            db_admin_username="$RET"
            db_get wazo-auth/db-admin-password
            db_admin_password="$RET"
            db_get wazo-auth/db-app-name
            db_app_name="$RET"
            db_get wazo-auth/db-app-username
            db_app_username="$RET"
            db_get wazo-auth/db-app-password
            db_app_password="$RET"

            if [ "$db_admin_password" = '' ] ; then
                wazo-auth-init-db --user postgres
            else
                cat > /etc/wazo-auth/conf.d/50-db.yml <<EOF
# This file was autogenerated at install time by dpkg.
db_uri: postgresql://$db_app_username:$db_app_password@$db_host:$db_port/$db_app_name?application_name=wazo-auth
EOF
                wazo-auth-init-db \
                    --pg_db_uri "postgresql://$db_admin_username:$db_admin_password@$db_host:$db_port/postgres" \
                    --owner "$db_app_username" \
                    --password "$db_app_password" \
                    --db "$db_app_name" \
                    --auth_db_uri "postgresql://$db_admin_username:$db_admin_password@$db_host:$db_port/$db_app_name"
            fi
            echo "Upgrading ${DAEMONNAME} database ..."
            wazo-auth-upgrade-db
        fi

        # If root's configuration file is already there, do not bootstrap again
        if [ ! -f "/root/.config/wazo-auth-cli/050-credentials.yml" ]; then

            # If user explicitly refused to bootstrap, skip
            db_get wazo-auth/bootstrap-skip
            bootstrap_skip="$RET"
            if [ "$bootstrap_skip" = "false" ] ; then
                wazo-auth-bootstrap complete
            fi
        fi

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
